const express = require('express');
const bodyParser = require('body-parser');
const MongoClient = require('mongodb').MongoClient;

const app = express();
const port = 3000;

app.use(bodyParser.json());

// MongoDB connection URL and database name
const url = 'mongodb://localhost:27017';
const dbName = 'billing_system';

// Function to connect to the database
const connectToDatabase = async () => {
  try {
    const client = await MongoClient.connect(url, { useUnifiedTopology: true });
    const db = client.db(dbName);
    console.log('Connected to the database');
    return db;
  } catch (err) {
    console.error('Error connecting to the database', err);
  }
};

// Function to calculate the tax amount based on product price
function calculateProductTax(price) {
  if (price > 1000 && price <= 5000) {
    return price * 0.12;
  } else if (price > 5000) {
    return price * 0.18;
  } else {
    return 200;
  }
}

// Function to calculate the tax amount based on service price
function calculateServiceTax(price) {
  if (price > 1000 && price <= 8000) {
    return price * 0.1;
  } else if (price > 8000) {
    return price * 0.15;
  } else {
    return 100;
  }
}

// Endpoint: POST /api/users
// Description: Create a new user account.
// Request body: User information (name, email, password, etc.).
// Response: User object with a unique identifier (e.g., user ID) and other details.
app.post('/api/users', async (req, res) => {
  try {
    const { name, email, password } = req.body;
    // Save the user data to the database
    const user = { name, email, password };
    const result = await db.collection('users').insertOne(user);
    res.json({ ...user, _id: result.insertedId });
  } catch (error) {
    console.error('Error creating user:', error);
    res.status(500).json({ error: 'Could not create user' });
  }
});

// Endpoint: GET /api/products
// Description: Retrieve a list of all available products and services with their prices.
// Response: Array of product and service objects with details.
app.get('/api/products', async (req, res) => {
  try {
    // Fetch products and services from the database
    const products = await db.collection('products').find().toArray();
    const services = await db.collection('services').find().toArray();
    res.json({ products, services });
  } catch (error) {
    console.error('Error fetching products and services:', error);
    res.status(500).json({ error: 'Could not fetch products and services' });
  }
});

// Endpoint: POST /api/cart/add
// Description: Add a product or service to the user's cart.
// Request body: Product or service ID and quantity.
// Response: Updated cart object with the added item.
app.post('/api/cart/add', async (req, res) => {
  try {
    const { itemId, quantity } = req.body;
    const item = await db.collection('products').findOne({ _id: ObjectId(itemId) });
    if (!item) {
      return res.status(404).json({ error: 'Item not found' });
    }

    // Calculate the tax amount based on item type
    const taxAmount = item.type === 'product' ? calculateProductTax(item.price) : calculateServiceTax(item.price);

    const cartItem = { ...item, quantity, tax: taxAmount };
    // Save the cart item to the database
    const result = await db.collection('cart').insertOne(cartItem);
    res.json({ ...cartItem, _id: result.insertedId });
  } catch (error) {
    console.error('Error adding item to cart:', error);
    res.status(500).json({ error: 'Could not add item to cart' });
  }
});

// Add more endpoints for other functionalities



// Start the server
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});

// API endpoints implementation (you need to add more as per the problem statement)
app.post('/api/users', async (req, res) => {
  // Implement user account creation logic
  // ...
  res.send('User account created successfully');
});

app.get('/api/products', async (req, res) => {
  // Implement fetching products and services information logic
  // ...
  res.send(productsAndServicesData);
});

app.post('/api/cart/add', async (req, res) => {
  // Implement adding a product or service to the cart logic
  // ...
  res.send('Item added to cart successfully');
});

// Add more endpoints for other functionalities

// Connect to the database and start the server
connectToDatabase().then(() => {
  console.log('Connected to the database');
  app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
  });
});
